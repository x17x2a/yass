#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'lexer'
require 'objects'

class YassParser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 103)
	def start(text)
		@q = do_lex text
		do_parse
	end
	
	def next_token
	  @q.shift
	end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     1,     2,     3,     5,     6 ]

racc_action_check = [
     0,     0,     0,     4,     5 ]

racc_action_pointer = [
    -2,   nil,   nil,   nil,     3,     4,   nil ]

racc_action_default = [
   -69,    -1,    -2,    -3,   -69,   -69,     7 ]

racc_goto_table = [
     4 ]

racc_goto_check = [
     1 ]

racc_goto_pointer = [
   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 37, :_reduce_1,
  1, 37, :_reduce_2,
  1, 37, :_reduce_3,
  1, 38, :_reduce_none,
  1, 38, :_reduce_5,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  3, 39, :_reduce_11,
  3, 40, :_reduce_12,
  3, 40, :_reduce_13,
  3, 40, :_reduce_14,
  3, 40, :_reduce_15,
  3, 40, :_reduce_16,
  3, 40, :_reduce_17,
  3, 40, :_reduce_18,
  3, 40, :_reduce_19,
  3, 40, :_reduce_20,
  3, 40, :_reduce_21,
  3, 40, :_reduce_22,
  3, 40, :_reduce_23,
  2, 41, :_reduce_24,
  2, 41, :_reduce_25,
  4, 42, :_reduce_26,
  4, 43, :_reduce_27,
  1, 44, :_reduce_28,
  3, 44, :_reduce_29,
  1, 45, :_reduce_none,
  2, 46, :_reduce_31,
  5, 46, :_reduce_32,
  2, 47, :_reduce_33,
  2, 48, :_reduce_34,
  0, 49, :_reduce_none,
  2, 49, :_reduce_none,
  3, 49, :_reduce_none,
  0, 50, :_reduce_none,
  3, 50, :_reduce_none,
  5, 50, :_reduce_none,
  5, 51, :_reduce_none,
  7, 51, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_45,
  1, 52, :_reduce_46,
  1, 52, :_reduce_47,
  2, 52, :_reduce_48,
  2, 52, :_reduce_49,
  2, 52, :_reduce_50,
  1, 52, :_reduce_51,
  2, 54, :_reduce_none,
  2, 54, :_reduce_none,
  2, 56, :_reduce_none,
  1, 56, :_reduce_none,
  2, 47, :_reduce_none,
  1, 57, :_reduce_none,
  2, 57, :_reduce_none,
  0, 58, :_reduce_none,
  3, 58, :_reduce_none,
  2, 53, :_reduce_none,
  3, 53, :_reduce_none,
  1, 55, :_reduce_63,
  2, 55, :_reduce_64,
  2, 55, :_reduce_65,
  0, 59, :_reduce_none,
  1, 59, :_reduce_none,
  2, 59, :_reduce_none ]

racc_reduce_n = 69

racc_shift_n = 7

racc_token_table = {
  false => 0,
  :error => 1,
  :INT => 2,
  :FLOAT => 3,
  :STRING => 4,
  :IDENTIFER => 5,
  "(" => 6,
  ")" => 7,
  "+" => 8,
  "-" => 9,
  "*" => 10,
  "/" => 11,
  "==" => 12,
  "!=" => 13,
  ">=" => 14,
  "<=" => 15,
  ">" => 16,
  "<" => 17,
  :AND => 18,
  :OR => 19,
  :NOT => 20,
  "[" => 21,
  "]" => 22,
  "," => 23,
  "=" => 24,
  :SCOPE => 25,
  :NAME => 26,
  :FUN => 27,
  ":" => 28,
  :EXITWHEN => 29,
  :IF => 30,
  :ELSEIF => 31,
  :ELSE => 32,
  :EOL => 33,
  :ARRAY => 34,
  :END => 35 }

racc_nt_base = 36

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INT",
  "FLOAT",
  "STRING",
  "IDENTIFER",
  "\"(\"",
  "\")\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"==\"",
  "\"!=\"",
  "\">=\"",
  "\"<=\"",
  "\">\"",
  "\"<\"",
  "AND",
  "OR",
  "NOT",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "\"=\"",
  "SCOPE",
  "NAME",
  "FUN",
  "\":\"",
  "EXITWHEN",
  "IF",
  "ELSEIF",
  "ELSE",
  "EOL",
  "ARRAY",
  "END",
  "$start",
  "literal",
  "expression",
  "braces",
  "binary",
  "unary",
  "array_get",
  "call",
  "arg_list",
  "variable",
  "set",
  "var_assignment",
  "scope",
  "name_list",
  "parameter_list",
  "function",
  "line_word",
  "var_definition",
  "line",
  "end_scope",
  "var_declaration",
  "var_decl_assign",
  "var_decl_assign_list",
  "main" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 3)
  def _reduce_1(val, _values, result)
    result = Literal.new :INT, val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 4)
  def _reduce_2(val, _values, result)
    result = Literal.new :FLOAT, val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 5)
  def _reduce_3(val, _values, result)
    result = Literal.new :STRING, val[0]
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_5(val, _values, result)
    result = Literal.new :NAME, val[0]
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_11(val, _values, result)
    result = Braces.new val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_12(val, _values, result)
    result = Binard.new '+', val[0], val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_13(val, _values, result)
    result = Binard.new '-', val[0], val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_14(val, _values, result)
    result = Binard.new '*', val[0], val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_15(val, _values, result)
    result = Binard.new '/', val[0], val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_16(val, _values, result)
    result = Binard.new '==', val[0], val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_17(val, _values, result)
    result = Binard.new '!=', val[0], val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_18(val, _values, result)
    result = Binard.new '>=', val[0], val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_19(val, _values, result)
    result = Binard.new '<=', val[0], val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_20(val, _values, result)
    result = Binard.new '>', val[0], val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_21(val, _values, result)
    result = Binard.new '<', val[0], val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_22(val, _values, result)
    result = Binard.new :AND, val[0], val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_23(val, _values, result)
    result = Binard.new :OR, val[0], val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_24(val, _values, result)
    result = Unary.new '-', val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_25(val, _values, result)
    result = Unary.new :NOT, val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_26(val, _values, result)
    result = ArrayGet.new val[0], val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_27(val, _values, result)
    result = Call.new val[0], val[3]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_28(val, _values, result)
    val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_29(val, _values, result)
    val[0].push val[2]; val[0]
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_31(val, _values, result)
    result=VariableAssignment.new val[0], val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_32(val, _values, result)
    raise "Not implemented"
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_33(val, _values, result)
    val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_34(val, _values, result)
    $scopingManager.push Scope.new val[1], []
    result
  end
.,.,

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_45(val, _values, result)
    $scopingManager.addCode val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_46(val, _values, result)
    $scopingManager.addCode val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_47(val, _values, result)
    $scopingManager.addCode val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_48(val, _values, result)
    $scopingManager.addCode Exitwhen.new val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_49(val, _values, result)
    $scopingManager.push IfBlock.new []; $scopingManager.addBlock If.new( val[1], []); result=nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_50(val, _values, result)
    $scopingManager.pop; $scopingManager.addBlock ElseIf.new val[1], []; result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_51(val, _values, result)
    $scopingManager.pop; $scopingManager.addBlock Else.new []; result = nil
    result
  end
.,.,

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_63(val, _values, result)
    $scopingManager.pop
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_64(val, _values, result)
    $scopingManager.pop
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_65(val, _values, result)
    $scopingManager.pop
    result
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class YassParser

  
if $0 == __FILE__
  src = <<EOS

EOS
  puts 'parsing:'
  print src
  puts
  puts 'result:'
  YassParser.new.start(src)
end
